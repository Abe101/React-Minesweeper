{"version":3,"sources":["components/Cell/index.js","components/Row/index.js","components/Board/index.js","components/BoardHead/index.js","Minesweeper.js","index.js"],"names":["Cell","props","data","isOpen","hasMine","className","onContextMenu","e","preventDefault","onClick","open","count","flag","hasFlag","cell","Row","cells","map","index","key","Board","createBoard","board","i","rows","push","j","columns","x","y","mines","randomRow","Math","floor","random","randomCol","status","Promise","resolve","findMines","then","numberOfMines","console","log","state","current","openCells","newRows","setState","openCellClick","findAroundCell","endGame","alert","changeFlagAmount","minesInProximity","row","col","length","nextProps","this","Component","BoardHead","minutes","time","seconds","formatedSeconds","flagCount","reset","Minesweeper","checkForWinner","intervals","clearInterval","baseState","tick","setInterval","fn","t","handleCellClicked","prevState","amount","flags","prevProps","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.97e58192.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Cell = props => {\r\n  let cell = () => {\r\n    if (props.data.isOpen) {\r\n      if (props.data.hasMine) {\r\n        let bomb = \"ðŸ’£\";\r\n\r\n        return (\r\n          <div\r\n            className=\"cell bomb\"\r\n            onContextMenu={e => {\r\n              e.preventDefault();\r\n            }}\r\n            onClick={() => props.open(props.data)}\r\n          >\r\n            <span>{bomb}</span>\r\n          </div>\r\n        );\r\n      } else if (props.data.count === 0) {\r\n        return (\r\n          <div\r\n            className=\"cell open\"\r\n            onContextMenu={e => {\r\n              e.preventDefault();\r\n              props.flag(props.data);\r\n            }}\r\n            onClick={() => props.open(props.data)}\r\n          />\r\n        );\r\n      } else {\r\n        return (\r\n          <div\r\n            className=\"cell open\"\r\n            onContextMenu={e => {\r\n              e.preventDefault();\r\n            }}\r\n            onClick={() => props.open(props.data)}\r\n          >\r\n            {props.data.count}\r\n          </div>\r\n        );\r\n      }\r\n    } else if (props.data.hasFlag) {\r\n        \r\n        let flag = \"ðŸš©\";\r\n      return (\r\n        <div\r\n          className=\"cell open-flag\"\r\n          onContextMenu={e => {\r\n            e.preventDefault();\r\n            props.flag(props.data);\r\n          }}\r\n          onClick={() => props.open(props.data)}\r\n        >\r\n          <span>{flag}</span>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div\r\n          className=\"cell\"\r\n          onContextMenu={e => {\r\n            e.preventDefault();\r\n            props.flag(props.data);\r\n          }}\r\n          onClick={() => props.open(props.data)}\r\n        />\r\n      );\r\n    }\r\n  };\r\n  return cell();\r\n};\r\n\r\nexport default Cell;","import React from 'react'\r\nimport Cell from '../Cell'\r\n\r\nconst Row = props => {\r\n    let cells = props.cells.map((data, index) => {\r\n        return (\r\n            <Cell key={index} data={data} open={props.open} flag={props.flag} />\r\n        )\r\n    })\r\n    return (\r\n        <div className=\"row\">\r\n            {cells}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;","import React, { Component } from 'react'\r\nimport Row from '../Row'\r\n\r\nexport default class Board extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            rows: this.createBoard(props)\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (this.props.openCells > nextProps.openCells ||\r\n            this.props.columns !== nextProps.columns){\r\n            this.setState({\r\n                rows: this.createBoard(nextProps)\r\n            })\r\n        }\r\n    }\r\n\r\n    createBoard = props => {\r\n        let board = [];\r\n        \r\n        for (let i = 0; i < props.rows; i++) {\r\n            board.push([]);\r\n            \r\n            for (let j = 0; j < props.columns; j++) {\r\n                board[i].push({\r\n                    x: j,\r\n                    y: i,\r\n                    count: 10, // nearby mines, the radius number\r\n                    isOpen: false,\r\n                    hasMine: false,\r\n                    hasFlag: false\r\n                })\r\n            }\r\n        }\r\n        // console.log(board);\r\n        // after we create the board we add our mines\r\n        for (let i = 0; i < props.mines; i++) {\r\n            let randomRow = Math.floor(Math.random() * props.rows);\r\n            let randomCol = Math.floor(Math.random() * props.columns);\r\n\r\n            let cell = board[randomRow][randomCol];\r\n\r\n            // console.log(cell);\r\n\r\n            if (cell.hasMine) {\r\n                i--;\r\n            } else {\r\n                cell.hasMine = true;\r\n            }\r\n        }\r\n        return board;\r\n    }\r\n\r\n    open = cell => {\r\n        if (this.props.status === \"ended\") {\r\n      return;\r\n    }\r\n\r\n        let asyncCountMines = new Promise(resolve => {\r\n            let mines = this.findMines(cell);\r\n            resolve(mines);\r\n        })\r\n\r\n        asyncCountMines.then(numberOfMines => {\r\n            console.log(numberOfMines);\r\n\r\n            let rows = this.state.rows;\r\n\r\n            let current = rows[cell.y][cell.x];\r\n\r\n            if (current.hasMine && this.props.openCells === 0) {\r\n                console.log(\"cell already has mine\")\r\n                let newRows = this.createBoard(this.props);\r\n                this.setState({\r\n                    rows: newRows\r\n                }, () => {\r\n                    this.open(cell);\r\n                })\r\n            } else if (!cell.hasFlag && !current.isOpen) {\r\n                    this.props.openCellClick();\r\n\r\n                    current.isOpen = true;\r\n                    current.count = numberOfMines;\r\n\r\n                    console.log(current);\r\n\r\n                    this.setState({ rows });\r\n\r\n                    if (!current.hasMine && numberOfMines === 0) {\r\n                        this.findAroundCell(cell);\r\n                    }\r\n\r\n                    if (current.hasMine && this.props.openCells !== 0) {\r\n                        this.props.endGame();\r\n                        alert(\"you lose\")\r\n                    }\r\n                }\r\n            })        \r\n    }\r\n\r\n    flag = cell => {\r\n        if (this.props.status === \"ended\") {\r\n            return;\r\n        }\r\n\r\n        if (!cell.isOpen) {\r\n            let rows = this.state.rows;\r\n\r\n            cell.hasFlag = !cell.hasFlag;\r\n            this.setState({ rows });\r\n            this.props.changeFlagAmount(cell.hasFlag ? -1 : 1);\r\n        }\r\n    }\r\n\r\n    findMines = cell => {\r\n        let minesInProximity = 0;\r\n        for (let row = -1; row <= 1; row++) {\r\n            for (let col = -1; col <= 1; col++) {\r\n                if (cell.y + row >= 0 && \r\n                    cell.x + col >= 0) {\r\n                    if (cell.y + row < this.state.rows.length && \r\n                        cell.x + col < this.state.rows[0].length) {\r\n                        if (this.state.rows[cell.y + row][cell.x + col].hasMine && \r\n                            !(row === 0 && col === 0)) {\r\n                            minesInProximity++;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return minesInProximity;\r\n    }\r\n\r\n    findAroundCell = cell => {\r\n        let rows = this.state.rows;\r\n\r\n        // we're gonna go through each cell and open cells one by one until we find one with a mine, then we stop\r\n        for (let row = -1; row <= 1; row++) {\r\n            for (let col = -1; col <= 1; col++) {\r\n                if (cell.y + row >= 0 && \r\n                    cell.x + col >= 0) {\r\n                    if (cell.y + row < this.state.rows.length && \r\n                        cell.x + col < this.state.rows[0].length) {\r\n                        if (!this.state.rows[cell.y + row][cell.x + col].hasMine &&\r\n                            !this.state.rows[cell.y + row][cell.x + col].isOpen) {\r\n                                this.open(rows[cell.y + row][cell.x + col]);\r\n                            }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let rows = this.state.rows.map((row, index) => {\r\n            return (\r\n                <Row \r\n                    cells={row}\r\n                    key={index}\r\n                    open={this.open}\r\n                    flag={this.flag}\r\n                />\r\n            )\r\n        })\r\n        return (\r\n            <div className=\"board\">\r\n                {rows}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nconst BoardHead = props => {\r\n    let minutes = Math.floor(props.time / 60);\r\n    let seconds = props.time - minutes * 60 || 0;\r\n\r\n    let formatedSeconds = seconds < 10 ? `0${seconds}` : seconds;\r\n    \r\n    let time = `${minutes}:${formatedSeconds}`;\r\n    \r\n    return (\r\n        <div className=\"board-head\">\r\n            <div className=\"flag-count\">{props.flagCount}</div>\r\n                <button className=\"reset\" onClick={props.reset}>Reset</button>\r\n                <div className=\"timer\">{time}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BoardHead;","import React from 'react';\r\nimport Board from './components/Board'\r\nimport BoardHead from './components/BoardHead'\r\n\r\nclass Minesweeper extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      status: \"waiting\", // waiting, running, ended\r\n      rows: 10,\r\n      columns: 10,\r\n      flags: 10,\r\n      mines: 10,\r\n      openCells: 0,\r\n      time: 0\r\n    }\r\n\r\n    this.baseState = this.state;\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.status === \"running\"){\r\n      this.checkForWinner();\r\n    }\r\n  }\r\n\r\n  endGame = () => {\r\n    this.setState({\r\n      status: \"ended\"\r\n    })\r\n  }\r\n\r\n  checkForWinner = () => {\r\n    if (this.state.mines + this.state.openCells >= this.state.rows * this.state.columns) {\r\n      this.setState({\r\n        status: \"winner\"\r\n      }, alert('ggwp'))\r\n    }\r\n  }\r\n\r\n  reset = () => {\r\n    this.intervals.map(clearInterval);\r\n    this.setState({...this.baseState}, () => {\r\n      this.intervals = [];\r\n    })\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.intervals = [];\r\n  }\r\n\r\n  tick = () => {\r\n    if (this.state.openCells > 0 && this.state.status === \"running\") {\r\n      let time = this.state.time + 1;\r\n      this.setState({ time })\r\n    }\r\n  }\r\n\r\n  setInterval = (fn, t) => {\r\n    this.intervals.push(setInterval(fn, t));\r\n  }\r\n\r\n  handleCellClicked = () => {\r\n    if (this.state.openCells === 0 && this.state.status !== \"running\") {\r\n      this.setState({\r\n        status: \"running\"\r\n      }, () => {\r\n        this.setInterval(this.tick, 1000)\r\n      })\r\n    }\r\n\r\n    this.setState(prevState => {\r\n      return { openCells: prevState.openCells + 1 };\r\n    })\r\n  }\r\n\r\n  changeFlagAmount = (amount) => {\r\n    this.setState({ flags: this.state.flags + amount })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"minesweeper\">\r\n      <h1>Minesweeper</h1>\r\n        <BoardHead reset={this.reset} time={this.state.time} flagCount={this.state.flags}/>\r\n        <Board status={this.state.status} changeFlagAmount={this.changeFlagAmount} endGame={this.endGame} rows={this.state.rows} columns={this.state.columns} mines={this.state.mines} openCells={this.state.openCells} openCellClick={this.handleCellClicked} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Minesweeper;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Minesweeper from './Minesweeper';\r\n\r\nReactDOM.render(<Minesweeper />, document.getElementById('root'));\r\n"],"sourceRoot":""}